package com.square.getmedoc.db.model;

// Generated Sep 2, 2013 7:42:39 PM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Appuser generated by hbm2java
 */
@Entity
@Table(name = "appuser", catalog = "getmedoc", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
public class Appuser implements java.io.Serializable {

	private Long appuserid;
	private String username;
	private String password;
	private String fullname;
	private String email;
	private Integer enabled;
	private Integer usertype;
	private Integer usersubtype;
	private Integer status;
	private Integer substatus;
	private Set<Address> addresses = new HashSet<Address>(0);
	private Set<Userrole> userroles = new HashSet<Userrole>(0);
	private Set<Webaddress> webaddresses = new HashSet<Webaddress>(0);
	private Set<Phone> phones = new HashSet<Phone>(0);

	public Appuser() {
	}

	public Appuser(String username, String email) {
		this.username = username;
		this.email = email;
	}

	public Appuser(String username, String password, String fullname,
			String email, Integer enabled, Integer usertype,
			Integer usersubtype, Integer status, Integer substatus,
			Set<Address> addresses, Set<Userrole> userroles,
			Set<Webaddress> webaddresses, Set<Phone> phones) {
		this.username = username;
		this.password = password;
		this.fullname = fullname;
		this.email = email;
		this.enabled = enabled;
		this.usertype = usertype;
		this.usersubtype = usersubtype;
		this.status = status;
		this.substatus = substatus;
		this.addresses = addresses;
		this.userroles = userroles;
		this.webaddresses = webaddresses;
		this.phones = phones;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "appuserid", unique = true, nullable = false)
	public Long getAppuserid() {
		return this.appuserid;
	}

	public void setAppuserid(Long appuserid) {
		this.appuserid = appuserid;
	}

	@Column(name = "username", unique = true, nullable = false, length = 250)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", length = 250)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "fullname", length = 250)
	public String getFullname() {
		return this.fullname;
	}

	public void setFullname(String fullname) {
		this.fullname = fullname;
	}

	@Column(name = "email", nullable = false, length = 250)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "enabled")
	public Integer getEnabled() {
		return this.enabled;
	}

	public void setEnabled(Integer enabled) {
		this.enabled = enabled;
	}

	@Column(name = "usertype")
	public Integer getUsertype() {
		return this.usertype;
	}

	public void setUsertype(Integer usertype) {
		this.usertype = usertype;
	}

	@Column(name = "usersubtype")
	public Integer getUsersubtype() {
		return this.usersubtype;
	}

	public void setUsersubtype(Integer usersubtype) {
		this.usersubtype = usersubtype;
	}

	@Column(name = "status")
	public Integer getStatus() {
		return this.status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}

	@Column(name = "substatus")
	public Integer getSubstatus() {
		return this.substatus;
	}

	public void setSubstatus(Integer substatus) {
		this.substatus = substatus;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "appuser")
	public Set<Address> getAddresses() {
		return this.addresses;
	}

	public void setAddresses(Set<Address> addresses) {
		this.addresses = addresses;
	}

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "appuseruserrole", catalog = "getmedoc", joinColumns = { @JoinColumn(name = "appuserid", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "userroleid", nullable = false, updatable = false) })
	public Set<Userrole> getUserroles() {
		return this.userroles;
	}

	public void setUserroles(Set<Userrole> userroles) {
		this.userroles = userroles;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "appuser")
	public Set<Webaddress> getWebaddresses() {
		return this.webaddresses;
	}

	public void setWebaddresses(Set<Webaddress> webaddresses) {
		this.webaddresses = webaddresses;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "appuser")
	public Set<Phone> getPhones() {
		return this.phones;
	}

	public void setPhones(Set<Phone> phones) {
		this.phones = phones;
	}

}
